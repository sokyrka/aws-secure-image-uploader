AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Full SaaS-style Image Upload App with UI, Cognito, API Gateway and S3

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 10
    MemorySize: 128

Resources:

  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "image-upload-bucket-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: image-user-pool
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: image-app-client
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  CognitoAuth:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoUserAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGateway
      ProviderARNs:
        - !GetAtt UserPool.Arn

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: image-upload-api
      EndpointConfiguration:
        Type: REGIONAL
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Authorization,Content-Type'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt UserPool.Arn

  UploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: image-upload-url
      Handler: dist/index.imageUploadUrl
      CodeUri: .
      Environment:
        Variables:
          BUCKET_NAME: !Ref UploadBucket
      Events:
        GetSignedUrl:
          Type: Api
          Properties:
            Path: /upload-url
            Method: get
            Auth:
              Authorizer: CognitoAuth
            RestApiId: !Ref ApiGateway
        PreflightUploadUrl:
          Type: Api
          Properties:
            Path: /upload-url
            Method: options
            Auth:
              Authorizer: NONE
            RestApiId: !Ref ApiGateway
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref UploadBucket

  ListFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: list-user-files
      Handler: dist/index.listUserFiles
      CodeUri: .
      Environment:
        Variables:
          BUCKET_NAME: !Ref UploadBucket
      Events:
        ListFiles:
          Type: Api
          Properties:
            Path: /files
            Method: get
            Auth:
              Authorizer: CognitoAuth
            RestApiId: !Ref ApiGateway
        PreflightListFiles:
          Type: Api
          Properties:
            Path: /files
            Method: options
            Auth:
              Authorizer: NONE
            RestApiId: !Ref ApiGateway
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref UploadBucket

  DownloadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-download-url
      Handler: dist/index.getDownloadUrl
      CodeUri: .
      Environment:
        Variables:
          BUCKET_NAME: !Ref UploadBucket
      Events:
        GetDownloadUrl:
          Type: Api
          Properties:
            Path: download/file
            Method: get
            Auth:
              Authorizer: CognitoAuth
            RestApiId: !Ref ApiGateway
        PreflightDownloadUrl:
          Type: Api
          Properties:
            Path: download/file
            Method: options
            Auth:
              Authorizer: NONE
            RestApiId: !Ref ApiGateway
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref UploadBucket

  DeleteFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: delete-file
      Handler: dist/index.deleteFile
      CodeUri: .
      Environment:
        Variables:
          BUCKET_NAME: !Ref UploadBucket
      Events:
        DeleteFile:
          Type: Api
          Properties:
            Path: delete/file
            Method: delete
            Auth:
              Authorizer: CognitoAuth
            RestApiId: !Ref ApiGateway
        PreflightDeleteFile:
          Type: Api
          Properties:
            Path: delete/file
            Method: options
            Auth:
              Authorizer: NONE
            RestApiId: !Ref ApiGateway
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref UploadBucket

Outputs:
  FrontendWebsiteUrl:
    Description: "Frontend Static Website URL"
    Value: !Sub "http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com"

  ApiBaseUrl:
    Description: API Gateway base URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  BucketName:
    Value: !Ref UploadBucket

  CognitoUserPoolId:
    Value: !Ref UserPool

  CognitoAppClientId:
    Value: !Ref UserPoolClient
